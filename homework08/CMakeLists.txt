cmake_minimum_required(VERSION 3.23)
project(ProjectManager LANGUAGES CXX)

# ---- Options ----
option(PM_WITH_SQLITE "Enable SQLite support" OFF)
option(PM_WITH_BOOST  "Enable Boost support" OFF)
option(PM_WARN_AS_ERR "Treat warnings as errors" OFF)

# ---- Standard & warnings (modern target-based) ----
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Helper for warnings
function(pm_apply_warnings target)
  if (MSVC)
    target_compile_options(${target} PRIVATE /W4)
  else()
    target_compile_options(${target} PRIVATE -Wall -Wextra -Wpedantic)
  endif()
  if (PM_WARN_AS_ERR)
    if (MSVC)
      target_compile_options(${target} PRIVATE /WX)
    else()
      target_compile_options(${target} PRIVATE -Werror)
    endif()
  endif()
endfunction()

# ---- Conan packages (generated by CMakeDeps) ----
# We ask Config mode to prefer Conan-provided packages.
list(APPEND CMAKE_PREFIX_PATH "${CMAKE_BINARY_DIR}/generators")

find_package(fmt REQUIRED CONFIG)
find_package(spdlog REQUIRED CONFIG)
find_package(nlohmann_json REQUIRED CONFIG)
find_package(CLI11 REQUIRED CONFIG)
find_package(GTest REQUIRED CONFIG)

# Optional deps
if (PM_WITH_SQLITE)
  find_package(sqlite3 REQUIRED CONFIG)       # Conan 'sqlite3' recipe
endif()

if (PM_WITH_BOOST)
  # Using Conan boost CONFIG â€” components are lowercase
  find_package(boost REQUIRED CONFIG COMPONENTS filesystem system)
endif()

# ---- Subprojects ----
add_subdirectory(src/core)
add_subdirectory(src/app)
add_subdirectory(examples)

# ---- Tests ----
enable_testing()
add_subdirectory(tests)
